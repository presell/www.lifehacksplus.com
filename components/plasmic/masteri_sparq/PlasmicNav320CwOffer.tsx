// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wJD4VsJTYW6gZPn3AUEzqs
// Component: ZFsz13Ptv6xwG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantssuXxHpH6GpmS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SUXxHpH6GpmS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_masteri_sparq.module.css"; // plasmic-import: wJD4VsJTYW6gZPn3AUEzqs/projectcss
import sty from "./PlasmicNav320CwOffer.module.css"; // plasmic-import: ZFsz13Ptv6xwG/css

export type PlasmicNav320CwOffer__VariantMembers = {};
export type PlasmicNav320CwOffer__VariantsArgs = {};
type VariantPropType = keyof PlasmicNav320CwOffer__VariantsArgs;
export const PlasmicNav320CwOffer__VariantProps = new Array<VariantPropType>();

export type PlasmicNav320CwOffer__ArgsType = {};
type ArgPropType = keyof PlasmicNav320CwOffer__ArgsType;
export const PlasmicNav320CwOffer__ArgProps = new Array<ArgPropType>();

export type PlasmicNav320CwOffer__OverridesType = {
  div176?: p.Flex<"div">;
  div177?: p.Flex<"div">;
  label5?: p.Flex<"a"> & Partial<LinkProps>;
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3?: p.Flex<"div">;
  freeShipping5?: p.Flex<"div">;
};

export interface DefaultNav320CwOfferProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNav320CwOffer__RenderFunc(props: {
  variants: PlasmicNav320CwOffer__VariantsArgs;
  args: PlasmicNav320CwOffer__ArgsType;
  overrides: PlasmicNav320CwOffer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssuXxHpH6GpmS()
  });

  return (
    <div
      data-plasmic-name={"div176"}
      data-plasmic-override={overrides.div176}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.div176
      )}
    >
      <div
        data-plasmic-name={"div177"}
        data-plasmic-override={overrides.div177}
        className={classNames(projectcss.all, sty.div177)}
      >
        <p.PlasmicLink
          data-plasmic-name={"label5"}
          data-plasmic-override={overrides.label5}
          className={classNames(projectcss.all, projectcss.a, sty.label5)}
          component={Link}
          href={"#offer" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vx7Ha
            )}
          >
            {"CLAIM FREE DEVICE"}
          </div>
        </p.PlasmicLink>

        <div
          data-plasmic-name={
            "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3"
          }
          data-plasmic-override={
            overrides.specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3
          }
          className={classNames(
            projectcss.all,
            sty.specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ivkP5
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"SPECIAL OFFER: "}
              </span>
              <React.Fragment>
                {
                  "Claim this one-time offer. Try Vitamin Air at a fraction of the regular price today."
                }
              </React.Fragment>
            </React.Fragment>
          </div>
        </div>

        <div
          data-plasmic-name={"freeShipping5"}
          data-plasmic-override={overrides.freeShipping5}
          className={classNames(projectcss.all, sty.freeShipping5)}
        >
          {(
            hasVariant(globalVariants, "screen", "smallestMobile") ? true : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8Efpw
              )}
            >
              {"+ Free Shipping"}
            </div>
          ) : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  div176: [
    "div176",
    "div177",
    "label5",
    "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3",
    "freeShipping5"
  ],
  div177: [
    "div177",
    "label5",
    "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3",
    "freeShipping5"
  ],
  label5: ["label5"],
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3:
    [
      "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3"
    ],
  freeShipping5: ["freeShipping5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  div176: "div";
  div177: "div";
  label5: "a";
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3: "div";
  freeShipping5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNav320CwOffer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNav320CwOffer__VariantsArgs;
    args?: PlasmicNav320CwOffer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNav320CwOffer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNav320CwOffer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNav320CwOffer__ArgProps,
          internalVariantPropNames: PlasmicNav320CwOffer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNav320CwOffer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "div176") {
    func.displayName = "PlasmicNav320CwOffer";
  } else {
    func.displayName = `PlasmicNav320CwOffer.${nodeName}`;
  }
  return func;
}

export const PlasmicNav320CwOffer = Object.assign(
  // Top-level PlasmicNav320CwOffer renders the root element
  makeNodeComponent("div176"),
  {
    // Helper components rendering sub-elements
    div177: makeNodeComponent("div177"),
    label5: makeNodeComponent("label5"),
    specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3:
      makeNodeComponent(
        "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday3"
      ),
    freeShipping5: makeNodeComponent("freeShipping5"),

    // Metadata about props expected for PlasmicNav320CwOffer
    internalVariantProps: PlasmicNav320CwOffer__VariantProps,
    internalArgProps: PlasmicNav320CwOffer__ArgProps
  }
);

export default PlasmicNav320CwOffer;
/* prettier-ignore-end */
