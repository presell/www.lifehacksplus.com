// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wJD4VsJTYW6gZPn3AUEzqs
// Component: KXaiuxh0XMlvl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantssuXxHpH6GpmS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SUXxHpH6GpmS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_masteri_sparq.module.css"; // plasmic-import: wJD4VsJTYW6gZPn3AUEzqs/projectcss
import sty from "./PlasmicDisposableBogoOffer1440Px.module.css"; // plasmic-import: KXaiuxh0XMlvl/css

export type PlasmicDisposableBogoOffer1440Px__VariantMembers = {};
export type PlasmicDisposableBogoOffer1440Px__VariantsArgs = {};
type VariantPropType = keyof PlasmicDisposableBogoOffer1440Px__VariantsArgs;
export const PlasmicDisposableBogoOffer1440Px__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDisposableBogoOffer1440Px__ArgsType = {};
type ArgPropType = keyof PlasmicDisposableBogoOffer1440Px__ArgsType;
export const PlasmicDisposableBogoOffer1440Px__ArgProps =
  new Array<ArgPropType>();

export type PlasmicDisposableBogoOffer1440Px__OverridesType = {
  divprodarea?: p.Flex<"div">;
  div71?: p.Flex<"div">;
  div72?: p.Flex<"div">;
  prodimagepng?: p.Flex<"div">;
  div73?: p.Flex<"div">;
  buy2Get1?: p.Flex<"div">;
  free?: p.Flex<"div">;
  div74?: p.Flex<"div">;
  specialOffer?: p.Flex<"div">;
  freeVitaminAir?: p.Flex<"div">;
  moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack?: p.Flex<"div">;
  div75?: p.Flex<"div">;
  chooseFlavor?: p.Flex<"div">;
  div76?: p.Flex<"div">;
  div77?: p.Flex<"a"> & Partial<LinkProps>;
  div78?: p.Flex<"div">;
  div79?: p.Flex<"div">;
  strawberry?: p.Flex<"div">;
  div80?: p.Flex<"a"> & Partial<LinkProps>;
  div81?: p.Flex<"div">;
  div82?: p.Flex<"div">;
  vanila?: p.Flex<"div">;
  div83?: p.Flex<"div">;
  adifferance?: p.Flex<"div">;
  feelTheDifference?: p.Flex<"div">;
  fingericonpng?: p.Flex<"div">;
  paymentcardpng?: p.Flex<"div">;
};

export interface DefaultDisposableBogoOffer1440PxProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDisposableBogoOffer1440Px__RenderFunc(props: {
  variants: PlasmicDisposableBogoOffer1440Px__VariantsArgs;
  args: PlasmicDisposableBogoOffer1440Px__ArgsType;
  overrides: PlasmicDisposableBogoOffer1440Px__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssuXxHpH6GpmS()
  });

  return (
    <div
      data-plasmic-name={"divprodarea"}
      data-plasmic-override={overrides.divprodarea}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.divprodarea
      )}
      id={"offer" as const}
    >
      <div
        data-plasmic-name={"div71"}
        data-plasmic-override={overrides.div71}
        className={classNames(projectcss.all, sty.div71)}
      >
        <div
          data-plasmic-name={"div72"}
          data-plasmic-override={overrides.div72}
          className={classNames(projectcss.all, sty.div72)}
        >
          <div
            data-plasmic-name={"prodimagepng"}
            data-plasmic-override={overrides.prodimagepng}
            className={classNames(projectcss.all, sty.prodimagepng)}
          />

          <div
            data-plasmic-name={"div73"}
            data-plasmic-override={overrides.div73}
            className={classNames(projectcss.all, sty.div73)}
          >
            <div
              data-plasmic-name={"buy2Get1"}
              data-plasmic-override={overrides.buy2Get1}
              className={classNames(projectcss.all, sty.buy2Get1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ne1DJ
                )}
              >
                {"BUY 2, Get 1"}
              </div>
            </div>

            <div
              data-plasmic-name={"free"}
              data-plasmic-override={overrides.free}
              className={classNames(projectcss.all, sty.free)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rHt4L
                )}
              >
                {"Free"}
              </div>
            </div>
          </div>
        </div>

        <div
          data-plasmic-name={"div74"}
          data-plasmic-override={overrides.div74}
          className={classNames(projectcss.all, sty.div74)}
        >
          <div
            data-plasmic-name={"specialOffer"}
            data-plasmic-override={overrides.specialOffer}
            className={classNames(projectcss.all, sty.specialOffer)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vA4L
              )}
            >
              {"special offer"}
            </div>
          </div>

          <div
            data-plasmic-name={"freeVitaminAir"}
            data-plasmic-override={overrides.freeVitaminAir}
            className={classNames(projectcss.all, sty.freeVitaminAir)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jcjJx
              )}
            >
              {"free vitamin air"}
            </div>
          </div>

          <div
            data-plasmic-name={
              "moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack"
            }
            data-plasmic-override={
              overrides.moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack
            }
            className={classNames(
              projectcss.all,
              sty.moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dx4Nt
              )}
            >
              {
                "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back."
              }
            </div>
          </div>

          <div
            data-plasmic-name={"div75"}
            data-plasmic-override={overrides.div75}
            className={classNames(projectcss.all, sty.div75)}
          >
            <div
              data-plasmic-name={"chooseFlavor"}
              data-plasmic-override={overrides.chooseFlavor}
              className={classNames(projectcss.all, sty.chooseFlavor)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6REFa
                )}
              >
                {"Choose Flavor"}
              </div>
            </div>

            <div
              data-plasmic-name={"div76"}
              data-plasmic-override={overrides.div76}
              className={classNames(projectcss.all, sty.div76)}
            >
              <p.PlasmicLink
                data-plasmic-name={"div77"}
                data-plasmic-override={overrides.div77}
                className={classNames(projectcss.all, projectcss.a, sty.div77)}
                component={Link}
                href={
                  "https://shop.lifehacksplus.com/discount/FREE?redirect=/cart/39394788108:1,39394868748:1,39394817036:1?note=LHP-cw-offer-widget" as const
                }
                platform={"nextjs"}
              >
                <div
                  data-plasmic-name={"div78"}
                  data-plasmic-override={overrides.div78}
                  className={classNames(projectcss.all, sty.div78)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"div79"}
                      data-plasmic-override={overrides.div79}
                      className={classNames(projectcss.all, sty.div79)}
                    />
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"strawberry"}
                  data-plasmic-override={overrides.strawberry}
                  className={classNames(projectcss.all, sty.strawberry)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fpoW
                    )}
                  >
                    {"Strawberry"}
                  </div>
                </div>
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"div80"}
                data-plasmic-override={overrides.div80}
                className={classNames(projectcss.all, projectcss.a, sty.div80)}
                component={Link}
                href={
                  "https://shop.lifehacksplus.com/discount/FREE?redirect=/cart/39394788236:1,39394868940:1,39394817164:1?discount=FREE&note=LHP-cw-offer-widget" as const
                }
                platform={"nextjs"}
              >
                <div
                  data-plasmic-name={"div81"}
                  data-plasmic-override={overrides.div81}
                  className={classNames(projectcss.all, sty.div81)}
                >
                  <div
                    data-plasmic-name={"div82"}
                    data-plasmic-override={overrides.div82}
                    className={classNames(projectcss.all, sty.div82)}
                  />
                </div>

                <div
                  data-plasmic-name={"vanila"}
                  data-plasmic-override={overrides.vanila}
                  className={classNames(projectcss.all, sty.vanila)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eAsQd
                    )}
                  >
                    {"Vanilla"}
                  </div>
                </div>
              </p.PlasmicLink>
            </div>
          </div>

          <div
            data-plasmic-name={"div83"}
            data-plasmic-override={overrides.div83}
            className={classNames(projectcss.all, sty.div83)}
          >
            {(
              hasVariant(globalVariants, "screen", "desktopOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"adifferance"}
                data-plasmic-override={overrides.adifferance}
                className={classNames(projectcss.all, sty.adifferance)}
              >
                <div
                  data-plasmic-name={"feelTheDifference"}
                  data-plasmic-override={overrides.feelTheDifference}
                  className={classNames(projectcss.all, sty.feelTheDifference)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Cmid
                    )}
                  >
                    {"FEEL THE DIFFERENCE"}
                  </div>
                </div>

                <div
                  data-plasmic-name={"fingericonpng"}
                  data-plasmic-override={overrides.fingericonpng}
                  className={classNames(projectcss.all, sty.fingericonpng)}
                />
              </div>
            ) : null}

            <div
              data-plasmic-name={"paymentcardpng"}
              data-plasmic-override={overrides.paymentcardpng}
              className={classNames(projectcss.all, sty.paymentcardpng)}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  divprodarea: [
    "divprodarea",
    "div71",
    "div72",
    "prodimagepng",
    "div73",
    "buy2Get1",
    "free",
    "div74",
    "specialOffer",
    "freeVitaminAir",
    "moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack",
    "div75",
    "chooseFlavor",
    "div76",
    "div77",
    "div78",
    "div79",
    "strawberry",
    "div80",
    "div81",
    "div82",
    "vanila",
    "div83",
    "adifferance",
    "feelTheDifference",
    "fingericonpng",
    "paymentcardpng"
  ],
  div71: [
    "div71",
    "div72",
    "prodimagepng",
    "div73",
    "buy2Get1",
    "free",
    "div74",
    "specialOffer",
    "freeVitaminAir",
    "moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack",
    "div75",
    "chooseFlavor",
    "div76",
    "div77",
    "div78",
    "div79",
    "strawberry",
    "div80",
    "div81",
    "div82",
    "vanila",
    "div83",
    "adifferance",
    "feelTheDifference",
    "fingericonpng",
    "paymentcardpng"
  ],
  div72: ["div72", "prodimagepng", "div73", "buy2Get1", "free"],
  prodimagepng: ["prodimagepng"],
  div73: ["div73", "buy2Get1", "free"],
  buy2Get1: ["buy2Get1"],
  free: ["free"],
  div74: [
    "div74",
    "specialOffer",
    "freeVitaminAir",
    "moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack",
    "div75",
    "chooseFlavor",
    "div76",
    "div77",
    "div78",
    "div79",
    "strawberry",
    "div80",
    "div81",
    "div82",
    "vanila",
    "div83",
    "adifferance",
    "feelTheDifference",
    "fingericonpng",
    "paymentcardpng"
  ],
  specialOffer: ["specialOffer"],
  freeVitaminAir: ["freeVitaminAir"],
  moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack: [
    "moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack"
  ],
  div75: [
    "div75",
    "chooseFlavor",
    "div76",
    "div77",
    "div78",
    "div79",
    "strawberry",
    "div80",
    "div81",
    "div82",
    "vanila"
  ],
  chooseFlavor: ["chooseFlavor"],
  div76: [
    "div76",
    "div77",
    "div78",
    "div79",
    "strawberry",
    "div80",
    "div81",
    "div82",
    "vanila"
  ],
  div77: ["div77", "div78", "div79", "strawberry"],
  div78: ["div78", "div79"],
  div79: ["div79"],
  strawberry: ["strawberry"],
  div80: ["div80", "div81", "div82", "vanila"],
  div81: ["div81", "div82"],
  div82: ["div82"],
  vanila: ["vanila"],
  div83: [
    "div83",
    "adifferance",
    "feelTheDifference",
    "fingericonpng",
    "paymentcardpng"
  ],
  adifferance: ["adifferance", "feelTheDifference", "fingericonpng"],
  feelTheDifference: ["feelTheDifference"],
  fingericonpng: ["fingericonpng"],
  paymentcardpng: ["paymentcardpng"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  divprodarea: "div";
  div71: "div";
  div72: "div";
  prodimagepng: "div";
  div73: "div";
  buy2Get1: "div";
  free: "div";
  div74: "div";
  specialOffer: "div";
  freeVitaminAir: "div";
  moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack: "div";
  div75: "div";
  chooseFlavor: "div";
  div76: "div";
  div77: "a";
  div78: "div";
  div79: "div";
  strawberry: "div";
  div80: "a";
  div81: "div";
  div82: "div";
  vanila: "div";
  div83: "div";
  adifferance: "div";
  feelTheDifference: "div";
  fingericonpng: "div";
  paymentcardpng: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDisposableBogoOffer1440Px__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDisposableBogoOffer1440Px__VariantsArgs;
    args?: PlasmicDisposableBogoOffer1440Px__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDisposableBogoOffer1440Px__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDisposableBogoOffer1440Px__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDisposableBogoOffer1440Px__ArgProps,
          internalVariantPropNames:
            PlasmicDisposableBogoOffer1440Px__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDisposableBogoOffer1440Px__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "divprodarea") {
    func.displayName = "PlasmicDisposableBogoOffer1440Px";
  } else {
    func.displayName = `PlasmicDisposableBogoOffer1440Px.${nodeName}`;
  }
  return func;
}

export const PlasmicDisposableBogoOffer1440Px = Object.assign(
  // Top-level PlasmicDisposableBogoOffer1440Px renders the root element
  makeNodeComponent("divprodarea"),
  {
    // Helper components rendering sub-elements
    div71: makeNodeComponent("div71"),
    div72: makeNodeComponent("div72"),
    prodimagepng: makeNodeComponent("prodimagepng"),
    div73: makeNodeComponent("div73"),
    buy2Get1: makeNodeComponent("buy2Get1"),
    free: makeNodeComponent("free"),
    div74: makeNodeComponent("div74"),
    specialOffer: makeNodeComponent("specialOffer"),
    freeVitaminAir: makeNodeComponent("freeVitaminAir"),
    moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack: makeNodeComponent(
      "moneyBackGuaranteeBetterFlavorHarderHitsOrYourMoneyBack"
    ),
    div75: makeNodeComponent("div75"),
    chooseFlavor: makeNodeComponent("chooseFlavor"),
    div76: makeNodeComponent("div76"),
    div77: makeNodeComponent("div77"),
    div78: makeNodeComponent("div78"),
    div79: makeNodeComponent("div79"),
    strawberry: makeNodeComponent("strawberry"),
    div80: makeNodeComponent("div80"),
    div81: makeNodeComponent("div81"),
    div82: makeNodeComponent("div82"),
    vanila: makeNodeComponent("vanila"),
    div83: makeNodeComponent("div83"),
    adifferance: makeNodeComponent("adifferance"),
    feelTheDifference: makeNodeComponent("feelTheDifference"),
    fingericonpng: makeNodeComponent("fingericonpng"),
    paymentcardpng: makeNodeComponent("paymentcardpng"),

    // Metadata about props expected for PlasmicDisposableBogoOffer1440Px
    internalVariantProps: PlasmicDisposableBogoOffer1440Px__VariantProps,
    internalArgProps: PlasmicDisposableBogoOffer1440Px__ArgProps
  }
);

export default PlasmicDisposableBogoOffer1440Px;
/* prettier-ignore-end */
