// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wJD4VsJTYW6gZPn3AUEzqs
// Component: GZ0R6WVqiMoqZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantssuXxHpH6GpmS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SUXxHpH6GpmS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_masteri_sparq.module.css"; // plasmic-import: wJD4VsJTYW6gZPn3AUEzqs/projectcss
import sty from "./PlasmicNav1440CwOffer.module.css"; // plasmic-import: GZ0R6WVqiMoqZ/css

export type PlasmicNav1440CwOffer__VariantMembers = {};
export type PlasmicNav1440CwOffer__VariantsArgs = {};
type VariantPropType = keyof PlasmicNav1440CwOffer__VariantsArgs;
export const PlasmicNav1440CwOffer__VariantProps = new Array<VariantPropType>();

export type PlasmicNav1440CwOffer__ArgsType = {};
type ArgPropType = keyof PlasmicNav1440CwOffer__ArgsType;
export const PlasmicNav1440CwOffer__ArgProps = new Array<ArgPropType>();

export type PlasmicNav1440CwOffer__OverridesType = {
  nav?: p.Flex<"div">;
  div2?: p.Flex<"div">;
  label?: p.Flex<"a"> & Partial<LinkProps>;
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday?: p.Flex<"div">;
  freeShipping?: p.Flex<"div">;
};

export interface DefaultNav1440CwOfferProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNav1440CwOffer__RenderFunc(props: {
  variants: PlasmicNav1440CwOffer__VariantsArgs;
  args: PlasmicNav1440CwOffer__ArgsType;
  overrides: PlasmicNav1440CwOffer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssuXxHpH6GpmS()
  });

  return (
    <div
      data-plasmic-name={"nav"}
      data-plasmic-override={overrides.nav}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.nav
      )}
    >
      <div
        data-plasmic-name={"div2"}
        data-plasmic-override={overrides.div2}
        className={classNames(projectcss.all, sty.div2)}
      >
        <p.PlasmicLink
          data-plasmic-name={"label"}
          data-plasmic-override={overrides.label}
          className={classNames(projectcss.all, projectcss.a, sty.label)}
          component={Link}
          href={"#offer" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t87KR
            )}
          >
            {"CLAIM FREE DEVICE"}
          </div>
        </p.PlasmicLink>

        <div
          data-plasmic-name={
            "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday"
          }
          data-plasmic-override={
            overrides.specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday
          }
          className={classNames(
            projectcss.all,
            sty.specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lod1U
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"SPECIAL OFFER:"}
              </span>
              <React.Fragment>
                {
                  " Claim this one-time offer. Try Vitamin Air at a fraction of the regular price today."
                }
              </React.Fragment>
            </React.Fragment>
          </div>
        </div>

        <div
          data-plasmic-name={"freeShipping"}
          data-plasmic-override={overrides.freeShipping}
          className={classNames(projectcss.all, sty.freeShipping)}
        >
          {(
            hasVariant(globalVariants, "screen", "desktopOnly") ? true : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gnRs1
              )}
            >
              {"+ Free Shipping"}
            </div>
          ) : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  nav: [
    "nav",
    "div2",
    "label",
    "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday",
    "freeShipping"
  ],
  div2: [
    "div2",
    "label",
    "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday",
    "freeShipping"
  ],
  label: ["label"],
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday:
    [
      "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday"
    ],
  freeShipping: ["freeShipping"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  nav: "div";
  div2: "div";
  label: "a";
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday: "div";
  freeShipping: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNav1440CwOffer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNav1440CwOffer__VariantsArgs;
    args?: PlasmicNav1440CwOffer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNav1440CwOffer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNav1440CwOffer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNav1440CwOffer__ArgProps,
          internalVariantPropNames: PlasmicNav1440CwOffer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNav1440CwOffer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "nav") {
    func.displayName = "PlasmicNav1440CwOffer";
  } else {
    func.displayName = `PlasmicNav1440CwOffer.${nodeName}`;
  }
  return func;
}

export const PlasmicNav1440CwOffer = Object.assign(
  // Top-level PlasmicNav1440CwOffer renders the root element
  makeNodeComponent("nav"),
  {
    // Helper components rendering sub-elements
    div2: makeNodeComponent("div2"),
    label: makeNodeComponent("label"),
    specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday:
      makeNodeComponent(
        "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday"
      ),
    freeShipping: makeNodeComponent("freeShipping"),

    // Metadata about props expected for PlasmicNav1440CwOffer
    internalVariantProps: PlasmicNav1440CwOffer__VariantProps,
    internalArgProps: PlasmicNav1440CwOffer__ArgProps
  }
);

export default PlasmicNav1440CwOffer;
/* prettier-ignore-end */
