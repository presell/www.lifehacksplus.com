// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wJD4VsJTYW6gZPn3AUEzqs
// Component: 1utSr2T9ypsxV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantssuXxHpH6GpmS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SUXxHpH6GpmS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_masteri_sparq.module.css"; // plasmic-import: wJD4VsJTYW6gZPn3AUEzqs/projectcss
import sty from "./PlasmicFuelSingle414Px.module.css"; // plasmic-import: 1utSr2T9ypsxV/css

export type PlasmicFuelSingle414Px__VariantMembers = {};
export type PlasmicFuelSingle414Px__VariantsArgs = {};
type VariantPropType = keyof PlasmicFuelSingle414Px__VariantsArgs;
export const PlasmicFuelSingle414Px__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFuelSingle414Px__ArgsType = {};
type ArgPropType = keyof PlasmicFuelSingle414Px__ArgsType;
export const PlasmicFuelSingle414Px__ArgProps = new Array<ArgPropType>();

export type PlasmicFuelSingle414Px__OverridesType = {
  div9?: p.Flex<"div">;
  a?: p.Flex<"div">;
  productFuel250X2502Xjpg?: p.Flex<"a"> & Partial<LinkProps>;
  div10?: p.Flex<"div">;
  _43Rating447Votes?: p.Flex<"div">;
  i?: p.Flex<"div">;
  i2?: p.Flex<"div">;
  i3?: p.Flex<"div">;
  i4?: p.Flex<"div">;
  i5?: p.Flex<"div">;
  form?: p.Flex<"div">;
  div11?: p.Flex<"div">;
  div12?: p.Flex<"div">;
  div13?: p.Flex<"div">;
  div14?: p.Flex<"a"> & Partial<LinkProps>;
  label?: p.Flex<"div">;
  strawberry?: p.Flex<"div">;
  div15?: p.Flex<"a"> & Partial<LinkProps>;
  label2?: p.Flex<"div">;
  vanilla?: p.Flex<"div">;
  div16?: p.Flex<"div">;
  buttonAddToCart10624207628?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultFuelSingle414PxProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFuelSingle414Px__RenderFunc(props: {
  variants: PlasmicFuelSingle414Px__VariantsArgs;
  args: PlasmicFuelSingle414Px__ArgsType;
  overrides: PlasmicFuelSingle414Px__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssuXxHpH6GpmS()
  });

  return (
    <div
      data-plasmic-name={"div9"}
      data-plasmic-override={overrides.div9}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.div9
      )}
    >
      <div
        data-plasmic-name={"a"}
        data-plasmic-override={overrides.a}
        className={classNames(projectcss.all, sty.a)}
      >
        <p.PlasmicLink
          data-plasmic-name={"productFuel250X2502Xjpg"}
          data-plasmic-override={overrides.productFuel250X2502Xjpg}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.productFuel250X2502Xjpg
          )}
          component={Link}
          href={
            "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/fuel?variant=39394788108" as const
          }
          platform={"nextjs"}
        />

        <div
          data-plasmic-name={"div10"}
          data-plasmic-override={overrides.div10}
          className={classNames(projectcss.all, sty.div10)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ovhEn
            )}
          >
            {"Fuel"}
          </div>

          <div
            data-plasmic-name={"_43Rating447Votes"}
            data-plasmic-override={overrides._43Rating447Votes}
            className={classNames(projectcss.all, sty._43Rating447Votes)}
          >
            <div
              data-plasmic-name={"i"}
              data-plasmic-override={overrides.i}
              className={classNames(projectcss.all, sty.i)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j8Egc
                )}
              >
                {hasVariant(globalVariants, "screen", "largestMobile")
                  ? "★\t"
                  : "★\t"}
              </div>
            </div>

            <div
              data-plasmic-name={"i2"}
              data-plasmic-override={overrides.i2}
              className={classNames(projectcss.all, sty.i2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nRScI
                )}
              >
                {"★\t"}
              </div>
            </div>

            <div
              data-plasmic-name={"i3"}
              data-plasmic-override={overrides.i3}
              className={classNames(projectcss.all, sty.i3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fFnge
                )}
              >
                {"★\t"}
              </div>
            </div>

            <div
              data-plasmic-name={"i4"}
              data-plasmic-override={overrides.i4}
              className={classNames(projectcss.all, sty.i4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ma0Nm
                )}
              >
                {"★\t"}
              </div>
            </div>

            <div
              data-plasmic-name={"i5"}
              data-plasmic-override={overrides.i5}
              className={classNames(projectcss.all, sty.i5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4ERS
                )}
              >
                {"★\t"}
              </div>
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mIrno
              )}
            >
              {"(447)"}
            </div>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dtDb3
            )}
          >
            {"$20"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jNZp
            )}
          >
            {"Energy-Enhancing"}
          </div>
        </div>
      </div>

      <div
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        className={classNames(projectcss.all, sty.form)}
      >
        <div
          data-plasmic-name={"div11"}
          data-plasmic-override={overrides.div11}
          className={classNames(projectcss.all, sty.div11)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"div12"}
            data-plasmic-override={overrides.div12}
            hasGap={true}
            className={classNames(projectcss.all, sty.div12)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rurex
              )}
            >
              {"Choose Flavor"}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"div13"}
              data-plasmic-override={overrides.div13}
              hasGap={true}
              className={classNames(projectcss.all, sty.div13)}
            >
              <p.PlasmicLink
                data-plasmic-name={"div14"}
                data-plasmic-override={overrides.div14}
                className={classNames(projectcss.all, projectcss.a, sty.div14)}
                component={Link}
                href={
                  "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/fuel?variant=39394788108" as const
                }
                platform={"nextjs"}
              >
                <div
                  data-plasmic-name={"label"}
                  data-plasmic-override={overrides.label}
                  className={classNames(projectcss.all, sty.label)}
                />

                <div
                  data-plasmic-name={"strawberry"}
                  data-plasmic-override={overrides.strawberry}
                  className={classNames(projectcss.all, sty.strawberry)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uEFsP
                    )}
                  >
                    {"Strawberry"}
                  </div>
                </div>
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"div15"}
                data-plasmic-override={overrides.div15}
                className={classNames(projectcss.all, projectcss.a, sty.div15)}
                component={Link}
                href={
                  "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/fuel?variant=39394788236" as const
                }
                platform={"nextjs"}
              >
                <div
                  data-plasmic-name={"label2"}
                  data-plasmic-override={overrides.label2}
                  className={classNames(projectcss.all, sty.label2)}
                />

                <div
                  data-plasmic-name={"vanilla"}
                  data-plasmic-override={overrides.vanilla}
                  className={classNames(projectcss.all, sty.vanilla)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kqMnx
                    )}
                  >
                    {"Vanilla"}
                  </div>
                </div>
              </p.PlasmicLink>
            </p.Stack>
          </p.Stack>
        </div>

        <div
          data-plasmic-name={"div16"}
          data-plasmic-override={overrides.div16}
          className={classNames(projectcss.all, sty.div16)}
        >
          <p.PlasmicLink
            data-plasmic-name={"buttonAddToCart10624207628"}
            data-plasmic-override={overrides.buttonAddToCart10624207628}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.buttonAddToCart10624207628
            )}
            component={Link}
            href={
              "https://shop.lifehacksplus.com/discount/QUIT15?redirect=/collections/all/products/fuel?variant=39394788108" as const
            }
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tU9E
              )}
            >
              {"SHOP NOW"}
            </div>
          </p.PlasmicLink>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  div9: [
    "div9",
    "a",
    "productFuel250X2502Xjpg",
    "div10",
    "_43Rating447Votes",
    "i",
    "i2",
    "i3",
    "i4",
    "i5",
    "form",
    "div11",
    "div12",
    "div13",
    "div14",
    "label",
    "strawberry",
    "div15",
    "label2",
    "vanilla",
    "div16",
    "buttonAddToCart10624207628"
  ],
  a: [
    "a",
    "productFuel250X2502Xjpg",
    "div10",
    "_43Rating447Votes",
    "i",
    "i2",
    "i3",
    "i4",
    "i5"
  ],
  productFuel250X2502Xjpg: ["productFuel250X2502Xjpg"],
  div10: ["div10", "_43Rating447Votes", "i", "i2", "i3", "i4", "i5"],
  _43Rating447Votes: ["_43Rating447Votes", "i", "i2", "i3", "i4", "i5"],
  i: ["i"],
  i2: ["i2"],
  i3: ["i3"],
  i4: ["i4"],
  i5: ["i5"],
  form: [
    "form",
    "div11",
    "div12",
    "div13",
    "div14",
    "label",
    "strawberry",
    "div15",
    "label2",
    "vanilla",
    "div16",
    "buttonAddToCart10624207628"
  ],
  div11: [
    "div11",
    "div12",
    "div13",
    "div14",
    "label",
    "strawberry",
    "div15",
    "label2",
    "vanilla"
  ],
  div12: [
    "div12",
    "div13",
    "div14",
    "label",
    "strawberry",
    "div15",
    "label2",
    "vanilla"
  ],
  div13: [
    "div13",
    "div14",
    "label",
    "strawberry",
    "div15",
    "label2",
    "vanilla"
  ],
  div14: ["div14", "label", "strawberry"],
  label: ["label"],
  strawberry: ["strawberry"],
  div15: ["div15", "label2", "vanilla"],
  label2: ["label2"],
  vanilla: ["vanilla"],
  div16: ["div16", "buttonAddToCart10624207628"],
  buttonAddToCart10624207628: ["buttonAddToCart10624207628"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  div9: "div";
  a: "div";
  productFuel250X2502Xjpg: "a";
  div10: "div";
  _43Rating447Votes: "div";
  i: "div";
  i2: "div";
  i3: "div";
  i4: "div";
  i5: "div";
  form: "div";
  div11: "div";
  div12: "div";
  div13: "div";
  div14: "a";
  label: "div";
  strawberry: "div";
  div15: "a";
  label2: "div";
  vanilla: "div";
  div16: "div";
  buttonAddToCart10624207628: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFuelSingle414Px__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFuelSingle414Px__VariantsArgs;
    args?: PlasmicFuelSingle414Px__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFuelSingle414Px__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFuelSingle414Px__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFuelSingle414Px__ArgProps,
          internalVariantPropNames: PlasmicFuelSingle414Px__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFuelSingle414Px__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "div9") {
    func.displayName = "PlasmicFuelSingle414Px";
  } else {
    func.displayName = `PlasmicFuelSingle414Px.${nodeName}`;
  }
  return func;
}

export const PlasmicFuelSingle414Px = Object.assign(
  // Top-level PlasmicFuelSingle414Px renders the root element
  makeNodeComponent("div9"),
  {
    // Helper components rendering sub-elements
    a: makeNodeComponent("a"),
    productFuel250X2502Xjpg: makeNodeComponent("productFuel250X2502Xjpg"),
    div10: makeNodeComponent("div10"),
    _43Rating447Votes: makeNodeComponent("_43Rating447Votes"),
    i: makeNodeComponent("i"),
    i2: makeNodeComponent("i2"),
    i3: makeNodeComponent("i3"),
    i4: makeNodeComponent("i4"),
    i5: makeNodeComponent("i5"),
    form: makeNodeComponent("form"),
    div11: makeNodeComponent("div11"),
    div12: makeNodeComponent("div12"),
    div13: makeNodeComponent("div13"),
    div14: makeNodeComponent("div14"),
    label: makeNodeComponent("label"),
    strawberry: makeNodeComponent("strawberry"),
    div15: makeNodeComponent("div15"),
    label2: makeNodeComponent("label2"),
    vanilla: makeNodeComponent("vanilla"),
    div16: makeNodeComponent("div16"),
    buttonAddToCart10624207628: makeNodeComponent("buttonAddToCart10624207628"),

    // Metadata about props expected for PlasmicFuelSingle414Px
    internalVariantProps: PlasmicFuelSingle414Px__VariantProps,
    internalArgProps: PlasmicFuelSingle414Px__ArgProps
  }
);

export default PlasmicFuelSingle414Px;
/* prettier-ignore-end */
