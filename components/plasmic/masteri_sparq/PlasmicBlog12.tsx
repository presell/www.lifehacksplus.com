// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wJD4VsJTYW6gZPn3AUEzqs
// Component: UYdM1YtE_Yr
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AnnouncementBar1440Px from "../../AnnouncementBar1440Px"; // plasmic-import: qON1wLGXxLhvK/component
import NavBar1440Px from "../../NavBar1440Px"; // plasmic-import: fuNPxN4Mz6a8R/component
import HeadlineIcons1440Px from "../../HeadlineIcons1440Px"; // plasmic-import: 7yDDnDCshHrNn/component
import DisposableBogoOffer1440Px from "../../DisposableBogoOffer1440Px"; // plasmic-import: KXaiuxh0XMlvl/component
import Collection3Pack1440Px from "../../Collection3Pack1440Px"; // plasmic-import: aae8A4seQLffE/component
import _1440VarietyRedo from "../../_1440VarietyRedo"; // plasmic-import: 4Xmgn6n080BCX/component
import FuelSingle1440Px from "../../FuelSingle1440Px"; // plasmic-import: 1XW2gjXMOvjb5/component
import PureSingle1440Px from "../../PureSingle1440Px"; // plasmic-import: 8xydCnm9CIOaN/component
import Variety6Pack1440Px from "../../Variety6Pack1440Px"; // plasmic-import: -iDh_LbE9_cuN/component
import MeltSingle1440Px from "../../MeltSingle1440Px"; // plasmic-import: X-5GGa12Q1UBv/component
import SubscriptionImageTextBanner from "../../SubscriptionImageTextBanner"; // plasmic-import: D2nJF8AzXyMMY/component
import PromissoryCommitment1440Px from "../../PromissoryCommitment1440Px"; // plasmic-import: u5rWtT0YY4XcR/component
import Footer1440Px from "../../Footer1440Px"; // plasmic-import: EgxvzUtVYBMDi/component
import CollectionWhole414Px from "../../CollectionWhole414Px"; // plasmic-import: jUIewLqUOGhSy/component
import HeadlineIcons414Px from "../../HeadlineIcons414Px"; // plasmic-import: LIbPMREFofruh/component
import _414BogoOffer from "../../_414BogoOffer"; // plasmic-import: FynkGdTOvgCs2/component
import _3Pack414Px from "../../_3Pack414Px"; // plasmic-import: 0H_YF9nXzcED7/component
import _414PxVariety from "../../_414PxVariety"; // plasmic-import: QakTQ9O5_fV8M/component
import Variety414Px from "../../Variety414Px"; // plasmic-import: _fAaIMpBipw-Y/component
import FuelSingle414Px from "../../FuelSingle414Px"; // plasmic-import: 1utSr2T9ypsxV/component
import PureSingle414Px from "../../PureSingle414Px"; // plasmic-import: ZA4C-ox3-lqdz/component
import MeltSingle414Px from "../../MeltSingle414Px"; // plasmic-import: BWMj3hPaIIM4a/component
import SubscriptionImageText414Px from "../../SubscriptionImageText414Px"; // plasmic-import: tA3bFheKBFKav/component
import PromissoryCommitment414Px from "../../PromissoryCommitment414Px"; // plasmic-import: hPXUkchYh8lQa/component
import Footer414Px from "../../Footer414Px"; // plasmic-import: 1N7tS9KuyaeeL/component
import _320PxAnncoumentFinal from "../../_320PxAnncoumentFinal"; // plasmic-import: st0_xSRO6Cbj6/component
import _320PxNavBarI from "../../_320PxNavBarI"; // plasmic-import: tEyzV0RFqLV4T/component
import _320PxImageIcons from "../../_320PxImageIcons"; // plasmic-import: -qv4035hzrt9G/component
import _320PxCwOfferBogo from "../../_320PxCwOfferBogo"; // plasmic-import: lUwyfzEUrpopJ/component
import _320Px3Pack from "../../_320Px3Pack"; // plasmic-import: DPS3rZoEyBnNo/component
import _320PxVariety from "../../_320PxVariety"; // plasmic-import: ocU3wjNEFTscH/component
import _320PxFuel from "../../_320PxFuel"; // plasmic-import: k_ZR2YmJHJoLI/component
import _320PxPure from "../../_320PxPure"; // plasmic-import: B63qcRWpR0XmJ/component
import _320PxMelt from "../../_320PxMelt"; // plasmic-import: wWxDUFEeKRkFW/component
import _320XSubscriptionImage from "../../_320XSubscriptionImage"; // plasmic-import: Eda-axjeANcFE/component
import _320PxCommitment from "../../_320PxCommitment"; // plasmic-import: d3W0ENAOcNaOe/component
import _320PxFooterI from "../../_320PxFooterI"; // plasmic-import: H9F42oltm8Qyu/component
import _320PxFooter from "../../_320PxFooter"; // plasmic-import: uG3j3zIrAJz3e/component

import { useScreenVariants as useScreenVariantssuXxHpH6GpmS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SUXxHpH6GpmS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_masteri_sparq.module.css"; // plasmic-import: wJD4VsJTYW6gZPn3AUEzqs/projectcss
import sty from "./PlasmicBlog12.module.css"; // plasmic-import: UYdM1YtE_Yr/css

export type PlasmicBlog12__VariantMembers = {};
export type PlasmicBlog12__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlog12__VariantsArgs;
export const PlasmicBlog12__VariantProps = new Array<VariantPropType>();

export type PlasmicBlog12__ArgsType = {};
type ArgPropType = keyof PlasmicBlog12__ArgsType;
export const PlasmicBlog12__ArgProps = new Array<ArgPropType>();

export type PlasmicBlog12__OverridesType = {
  page?: p.Flex<"div">;
  _1440Px?: p.Flex<"div">;
  head?: p.Flex<"div">;
  announcementBar1440Px?: p.Flex<typeof AnnouncementBar1440Px>;
  navBar1440Px?: p.Flex<typeof NavBar1440Px>;
  body?: p.Flex<"div">;
  headlineIcons1440Px?: p.Flex<typeof HeadlineIcons1440Px>;
  disposableBogoOffer1440Px?: p.Flex<typeof DisposableBogoOffer1440Px>;
  collection3Pack1440Px?: p.Flex<typeof Collection3Pack1440Px>;
  _1440VarietyRedo?: p.Flex<typeof _1440VarietyRedo>;
  fuelSingle1440Px?: p.Flex<typeof FuelSingle1440Px>;
  pureSingle1440Px?: p.Flex<typeof PureSingle1440Px>;
  variety6Pack1440Px?: p.Flex<typeof Variety6Pack1440Px>;
  meltSingle1440Px?: p.Flex<typeof MeltSingle1440Px>;
  subscriptionImageTextBanner?: p.Flex<typeof SubscriptionImageTextBanner>;
  footer?: p.Flex<"div">;
  promissoryCommitment1440Px?: p.Flex<typeof PromissoryCommitment1440Px>;
  footer1440Px?: p.Flex<typeof Footer1440Px>;
  _414PxRedo?: p.Flex<"div">;
  collectionWhole414Px?: p.Flex<typeof CollectionWhole414Px>;
  headlineIcons414Px?: p.Flex<typeof HeadlineIcons414Px>;
  _414BogoOffer?: p.Flex<typeof _414BogoOffer>;
  _3Pack414Px?: p.Flex<typeof _3Pack414Px>;
  _414PxVariety?: p.Flex<typeof _414PxVariety>;
  fuelSingle414Px?: p.Flex<typeof FuelSingle414Px>;
  pureSingle414Px?: p.Flex<typeof PureSingle414Px>;
  meltSingle414Px?: p.Flex<typeof MeltSingle414Px>;
  subscriptionImageText414Px?: p.Flex<typeof SubscriptionImageText414Px>;
  promissoryCommitment414Px?: p.Flex<typeof PromissoryCommitment414Px>;
  footer414Px?: p.Flex<typeof Footer414Px>;
  freeBox?: p.Flex<"div">;
  _320PxAnncoumentFinal?: p.Flex<typeof _320PxAnncoumentFinal>;
  _320PxNavBarI?: p.Flex<typeof _320PxNavBarI>;
  _320PxImageIcons?: p.Flex<typeof _320PxImageIcons>;
  _320PxCwOfferBogo?: p.Flex<typeof _320PxCwOfferBogo>;
  _320Px3Pack?: p.Flex<typeof _320Px3Pack>;
  _320PxVariety?: p.Flex<typeof _320PxVariety>;
  _320PxFuel?: p.Flex<typeof _320PxFuel>;
  _320PxPure?: p.Flex<typeof _320PxPure>;
  _320PxMelt?: p.Flex<typeof _320PxMelt>;
  _320XSubscriptionImage?: p.Flex<typeof _320XSubscriptionImage>;
  _320PxCommitment?: p.Flex<typeof _320PxCommitment>;
  _320PxFooterI?: p.Flex<typeof _320PxFooterI>;
  _320PxFooter?: p.Flex<typeof _320PxFooter>;
};

export interface DefaultBlog12Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBlog12__RenderFunc(props: {
  variants: PlasmicBlog12__VariantsArgs;
  args: PlasmicBlog12__ArgsType;
  overrides: PlasmicBlog12__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssuXxHpH6GpmS()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBlog12.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBlog12.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBlog12.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicBlog12.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicBlog12.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicBlog12.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(
          hasVariant(globalVariants, "screen", "desktopOnly")
            ? true
            : hasVariant(globalVariants, "screen", "largestMobile")
            ? true
            : hasVariant(globalVariants, "screen", "smallestMobile")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"page"}
            data-plasmic-override={overrides.page}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              sty.page
            )}
          >
            {(
              hasVariant(globalVariants, "screen", "desktopOnly")
                ? true
                : hasVariant(globalVariants, "screen", "smallestMobile")
                ? true
                : true
            ) ? (
              <div
                data-plasmic-name={"_1440Px"}
                data-plasmic-override={overrides._1440Px}
                className={classNames(projectcss.all, sty._1440Px)}
              >
                {(
                  hasVariant(globalVariants, "screen", "desktopOnly")
                    ? true
                    : hasVariant(globalVariants, "screen", "smallestMobile")
                    ? true
                    : true
                ) ? (
                  <div
                    data-plasmic-name={"head"}
                    data-plasmic-override={overrides.head}
                    className={classNames(projectcss.all, sty.head)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : hasVariant(globalVariants, "screen", "largestMobile")
                        ? true
                        : hasVariant(globalVariants, "screen", "smallestMobile")
                        ? true
                        : true
                    ) ? (
                      <AnnouncementBar1440Px
                        data-plasmic-name={"announcementBar1440Px"}
                        data-plasmic-override={overrides.announcementBar1440Px}
                        className={classNames(
                          "__wab_instance",
                          sty.announcementBar1440Px
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : hasVariant(globalVariants, "screen", "largestMobile")
                        ? true
                        : hasVariant(globalVariants, "screen", "smallestMobile")
                        ? true
                        : true
                    ) ? (
                      <NavBar1440Px
                        data-plasmic-name={"navBar1440Px"}
                        data-plasmic-override={overrides.navBar1440Px}
                        className={classNames(
                          "__wab_instance",
                          sty.navBar1440Px
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "largestMobile")
                    ? true
                    : hasVariant(globalVariants, "screen", "smallestMobile")
                    ? true
                    : true
                ) ? (
                  <div
                    data-plasmic-name={"body"}
                    data-plasmic-override={overrides.body}
                    className={classNames(projectcss.all, sty.body)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : hasVariant(globalVariants, "screen", "largestMobile")
                        ? true
                        : true
                    ) ? (
                      <HeadlineIcons1440Px
                        data-plasmic-name={"headlineIcons1440Px"}
                        data-plasmic-override={overrides.headlineIcons1440Px}
                        className={classNames(
                          "__wab_instance",
                          sty.headlineIcons1440Px
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : hasVariant(globalVariants, "screen", "largestMobile")
                        ? true
                        : true
                    ) ? (
                      <DisposableBogoOffer1440Px
                        data-plasmic-name={"disposableBogoOffer1440Px"}
                        data-plasmic-override={
                          overrides.disposableBogoOffer1440Px
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.disposableBogoOffer1440Px
                        )}
                      />
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.columns__kqwde)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__nHWeO
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "largestMobile"
                              )
                            ? true
                            : hasVariant(
                                globalVariants,
                                "screen",
                                "smallestMobile"
                              )
                            ? true
                            : true
                        ) ? (
                          <Collection3Pack1440Px
                            data-plasmic-name={"collection3Pack1440Px"}
                            data-plasmic-override={
                              overrides.collection3Pack1440Px
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.collection3Pack1440Px
                            )}
                          />
                        ) : null}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__b0Qbt
                        )}
                      >
                        <_1440VarietyRedo
                          data-plasmic-name={"_1440VarietyRedo"}
                          data-plasmic-override={overrides._1440VarietyRedo}
                          className={classNames(
                            "__wab_instance",
                            sty._1440VarietyRedo
                          )}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__sjuz5
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <FuelSingle1440Px
                            data-plasmic-name={"fuelSingle1440Px"}
                            data-plasmic-override={overrides.fuelSingle1440Px}
                            className={classNames(
                              "__wab_instance",
                              sty.fuelSingle1440Px
                            )}
                          />
                        ) : null}
                      </div>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__szTS
                        )}
                      >
                        <div
                          className={classNames(projectcss.all, sty.column__o1)}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "desktopOnly")
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "largestMobile"
                                )
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallestMobile"
                                )
                              ? true
                              : true
                          ) ? (
                            <PureSingle1440Px
                              data-plasmic-name={"pureSingle1440Px"}
                              data-plasmic-override={overrides.pureSingle1440Px}
                              className={classNames(
                                "__wab_instance",
                                sty.pureSingle1440Px
                              )}
                            />
                          ) : null}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__peqhr
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "desktopOnly")
                              ? true
                              : true
                          ) ? (
                            <Variety6Pack1440Px
                              data-plasmic-name={"variety6Pack1440Px"}
                              data-plasmic-override={
                                overrides.variety6Pack1440Px
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.variety6Pack1440Px
                              )}
                            />
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "desktopOnly")
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "largestMobile"
                                )
                              ? true
                              : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallestMobile"
                                )
                              ? true
                              : true
                          ) ? (
                            <MeltSingle1440Px
                              data-plasmic-name={"meltSingle1440Px"}
                              data-plasmic-override={overrides.meltSingle1440Px}
                              className={classNames(
                                "__wab_instance",
                                sty.meltSingle1440Px
                              )}
                            />
                          ) : null}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__bNb22
                          )}
                        />
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : true
                    ) ? (
                      <SubscriptionImageTextBanner
                        data-plasmic-name={"subscriptionImageTextBanner"}
                        data-plasmic-override={
                          overrides.subscriptionImageTextBanner
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.subscriptionImageTextBanner
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}

                <div
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames(projectcss.all, sty.footer)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "largestMobile")
                      ? true
                      : hasVariant(globalVariants, "screen", "smallestMobile")
                      ? true
                      : true
                  ) ? (
                    <PromissoryCommitment1440Px
                      data-plasmic-name={"promissoryCommitment1440Px"}
                      data-plasmic-override={
                        overrides.promissoryCommitment1440Px
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.promissoryCommitment1440Px
                      )}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "largestMobile")
                      ? true
                      : hasVariant(globalVariants, "screen", "smallestMobile")
                      ? true
                      : true
                  ) ? (
                    <Footer1440Px
                      data-plasmic-name={"footer1440Px"}
                      data-plasmic-override={overrides.footer1440Px}
                      className={classNames("__wab_instance", sty.footer1440Px)}
                    />
                  ) : null}
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "desktopOnly")
                ? true
                : hasVariant(globalVariants, "screen", "largestMobile")
                ? true
                : true
            ) ? (
              <div
                data-plasmic-name={"_414PxRedo"}
                data-plasmic-override={overrides._414PxRedo}
                className={classNames(projectcss.all, sty._414PxRedo)}
              >
                <CollectionWhole414Px
                  data-plasmic-name={"collectionWhole414Px"}
                  data-plasmic-override={overrides.collectionWhole414Px}
                  className={classNames(
                    "__wab_instance",
                    sty.collectionWhole414Px
                  )}
                />

                <HeadlineIcons414Px
                  data-plasmic-name={"headlineIcons414Px"}
                  data-plasmic-override={overrides.headlineIcons414Px}
                  className={classNames(
                    "__wab_instance",
                    sty.headlineIcons414Px
                  )}
                />

                <_414BogoOffer
                  data-plasmic-name={"_414BogoOffer"}
                  data-plasmic-override={overrides._414BogoOffer}
                  className={classNames("__wab_instance", sty._414BogoOffer)}
                />

                <_3Pack414Px
                  data-plasmic-name={"_3Pack414Px"}
                  data-plasmic-override={overrides._3Pack414Px}
                  className={classNames("__wab_instance", sty._3Pack414Px)}
                />

                <_414PxVariety
                  data-plasmic-name={"_414PxVariety"}
                  data-plasmic-override={overrides._414PxVariety}
                  className={classNames("__wab_instance", sty._414PxVariety)}
                />

                {(
                  hasVariant(globalVariants, "screen", "largestMobile")
                    ? true
                    : true
                ) ? (
                  <Variety414Px
                    className={classNames(
                      "__wab_instance",
                      sty.variety414Px__yl6Ny
                    )}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "largestMobile")
                    ? true
                    : true
                ) ? (
                  <Variety414Px
                    className={classNames(
                      "__wab_instance",
                      sty.variety414Px__xm28A
                    )}
                  />
                ) : null}

                <FuelSingle414Px
                  data-plasmic-name={"fuelSingle414Px"}
                  data-plasmic-override={overrides.fuelSingle414Px}
                  className={classNames("__wab_instance", sty.fuelSingle414Px)}
                />

                <PureSingle414Px
                  data-plasmic-name={"pureSingle414Px"}
                  data-plasmic-override={overrides.pureSingle414Px}
                  className={classNames("__wab_instance", sty.pureSingle414Px)}
                />

                <MeltSingle414Px
                  data-plasmic-name={"meltSingle414Px"}
                  data-plasmic-override={overrides.meltSingle414Px}
                  className={classNames("__wab_instance", sty.meltSingle414Px)}
                />

                <SubscriptionImageText414Px
                  data-plasmic-name={"subscriptionImageText414Px"}
                  data-plasmic-override={overrides.subscriptionImageText414Px}
                  className={classNames(
                    "__wab_instance",
                    sty.subscriptionImageText414Px
                  )}
                />

                <PromissoryCommitment414Px
                  data-plasmic-name={"promissoryCommitment414Px"}
                  data-plasmic-override={overrides.promissoryCommitment414Px}
                  className={classNames(
                    "__wab_instance",
                    sty.promissoryCommitment414Px
                  )}
                />

                <Footer414Px
                  data-plasmic-name={"footer414Px"}
                  data-plasmic-override={overrides.footer414Px}
                  className={classNames("__wab_instance", sty.footer414Px)}
                />
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "largestMobile")
                ? true
                : hasVariant(globalVariants, "screen", "smallestMobile")
                ? true
                : true
            ) ? (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <_320PxAnncoumentFinal
                  data-plasmic-name={"_320PxAnncoumentFinal"}
                  data-plasmic-override={overrides._320PxAnncoumentFinal}
                  className={classNames(
                    "__wab_instance",
                    sty._320PxAnncoumentFinal
                  )}
                />

                <_320PxNavBarI
                  data-plasmic-name={"_320PxNavBarI"}
                  data-plasmic-override={overrides._320PxNavBarI}
                  className={classNames("__wab_instance", sty._320PxNavBarI)}
                />

                <_320PxImageIcons
                  data-plasmic-name={"_320PxImageIcons"}
                  data-plasmic-override={overrides._320PxImageIcons}
                  className={classNames("__wab_instance", sty._320PxImageIcons)}
                />

                <_320PxCwOfferBogo
                  data-plasmic-name={"_320PxCwOfferBogo"}
                  data-plasmic-override={overrides._320PxCwOfferBogo}
                  className={classNames(
                    "__wab_instance",
                    sty._320PxCwOfferBogo
                  )}
                />

                <_320Px3Pack
                  data-plasmic-name={"_320Px3Pack"}
                  data-plasmic-override={overrides._320Px3Pack}
                  className={classNames("__wab_instance", sty._320Px3Pack)}
                />

                <_320PxVariety
                  data-plasmic-name={"_320PxVariety"}
                  data-plasmic-override={overrides._320PxVariety}
                  className={classNames("__wab_instance", sty._320PxVariety)}
                />

                <_320PxFuel
                  data-plasmic-name={"_320PxFuel"}
                  data-plasmic-override={overrides._320PxFuel}
                  className={classNames("__wab_instance", sty._320PxFuel)}
                />

                <_320PxPure
                  data-plasmic-name={"_320PxPure"}
                  data-plasmic-override={overrides._320PxPure}
                  className={classNames("__wab_instance", sty._320PxPure)}
                />

                <_320PxMelt
                  data-plasmic-name={"_320PxMelt"}
                  data-plasmic-override={overrides._320PxMelt}
                  className={classNames("__wab_instance", sty._320PxMelt)}
                />

                <_320XSubscriptionImage
                  data-plasmic-name={"_320XSubscriptionImage"}
                  data-plasmic-override={overrides._320XSubscriptionImage}
                  className={classNames(
                    "__wab_instance",
                    sty._320XSubscriptionImage
                  )}
                />

                <_320PxCommitment
                  data-plasmic-name={"_320PxCommitment"}
                  data-plasmic-override={overrides._320PxCommitment}
                  className={classNames("__wab_instance", sty._320PxCommitment)}
                />

                <_320PxFooterI
                  data-plasmic-name={"_320PxFooterI"}
                  data-plasmic-override={overrides._320PxFooterI}
                  className={classNames("__wab_instance", sty._320PxFooterI)}
                />

                {(
                  hasVariant(globalVariants, "screen", "smallestMobile")
                    ? true
                    : true
                ) ? (
                  <_320PxFooter
                    data-plasmic-name={"_320PxFooter"}
                    data-plasmic-override={overrides._320PxFooter}
                    className={classNames("__wab_instance", sty._320PxFooter)}
                  />
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  page: [
    "page",
    "_1440Px",
    "head",
    "announcementBar1440Px",
    "navBar1440Px",
    "body",
    "headlineIcons1440Px",
    "disposableBogoOffer1440Px",
    "collection3Pack1440Px",
    "_1440VarietyRedo",
    "fuelSingle1440Px",
    "pureSingle1440Px",
    "variety6Pack1440Px",
    "meltSingle1440Px",
    "subscriptionImageTextBanner",
    "footer",
    "promissoryCommitment1440Px",
    "footer1440Px",
    "_414PxRedo",
    "collectionWhole414Px",
    "headlineIcons414Px",
    "_414BogoOffer",
    "_3Pack414Px",
    "_414PxVariety",
    "fuelSingle414Px",
    "pureSingle414Px",
    "meltSingle414Px",
    "subscriptionImageText414Px",
    "promissoryCommitment414Px",
    "footer414Px",
    "freeBox",
    "_320PxAnncoumentFinal",
    "_320PxNavBarI",
    "_320PxImageIcons",
    "_320PxCwOfferBogo",
    "_320Px3Pack",
    "_320PxVariety",
    "_320PxFuel",
    "_320PxPure",
    "_320PxMelt",
    "_320XSubscriptionImage",
    "_320PxCommitment",
    "_320PxFooterI",
    "_320PxFooter"
  ],
  _1440Px: [
    "_1440Px",
    "head",
    "announcementBar1440Px",
    "navBar1440Px",
    "body",
    "headlineIcons1440Px",
    "disposableBogoOffer1440Px",
    "collection3Pack1440Px",
    "_1440VarietyRedo",
    "fuelSingle1440Px",
    "pureSingle1440Px",
    "variety6Pack1440Px",
    "meltSingle1440Px",
    "subscriptionImageTextBanner",
    "footer",
    "promissoryCommitment1440Px",
    "footer1440Px"
  ],
  head: ["head", "announcementBar1440Px", "navBar1440Px"],
  announcementBar1440Px: ["announcementBar1440Px"],
  navBar1440Px: ["navBar1440Px"],
  body: [
    "body",
    "headlineIcons1440Px",
    "disposableBogoOffer1440Px",
    "collection3Pack1440Px",
    "_1440VarietyRedo",
    "fuelSingle1440Px",
    "pureSingle1440Px",
    "variety6Pack1440Px",
    "meltSingle1440Px",
    "subscriptionImageTextBanner"
  ],
  headlineIcons1440Px: ["headlineIcons1440Px"],
  disposableBogoOffer1440Px: ["disposableBogoOffer1440Px"],
  collection3Pack1440Px: ["collection3Pack1440Px"],
  _1440VarietyRedo: ["_1440VarietyRedo"],
  fuelSingle1440Px: ["fuelSingle1440Px"],
  pureSingle1440Px: ["pureSingle1440Px"],
  variety6Pack1440Px: ["variety6Pack1440Px"],
  meltSingle1440Px: ["meltSingle1440Px"],
  subscriptionImageTextBanner: ["subscriptionImageTextBanner"],
  footer: ["footer", "promissoryCommitment1440Px", "footer1440Px"],
  promissoryCommitment1440Px: ["promissoryCommitment1440Px"],
  footer1440Px: ["footer1440Px"],
  _414PxRedo: [
    "_414PxRedo",
    "collectionWhole414Px",
    "headlineIcons414Px",
    "_414BogoOffer",
    "_3Pack414Px",
    "_414PxVariety",
    "fuelSingle414Px",
    "pureSingle414Px",
    "meltSingle414Px",
    "subscriptionImageText414Px",
    "promissoryCommitment414Px",
    "footer414Px"
  ],
  collectionWhole414Px: ["collectionWhole414Px"],
  headlineIcons414Px: ["headlineIcons414Px"],
  _414BogoOffer: ["_414BogoOffer"],
  _3Pack414Px: ["_3Pack414Px"],
  _414PxVariety: ["_414PxVariety"],
  fuelSingle414Px: ["fuelSingle414Px"],
  pureSingle414Px: ["pureSingle414Px"],
  meltSingle414Px: ["meltSingle414Px"],
  subscriptionImageText414Px: ["subscriptionImageText414Px"],
  promissoryCommitment414Px: ["promissoryCommitment414Px"],
  footer414Px: ["footer414Px"],
  freeBox: [
    "freeBox",
    "_320PxAnncoumentFinal",
    "_320PxNavBarI",
    "_320PxImageIcons",
    "_320PxCwOfferBogo",
    "_320Px3Pack",
    "_320PxVariety",
    "_320PxFuel",
    "_320PxPure",
    "_320PxMelt",
    "_320XSubscriptionImage",
    "_320PxCommitment",
    "_320PxFooterI",
    "_320PxFooter"
  ],
  _320PxAnncoumentFinal: ["_320PxAnncoumentFinal"],
  _320PxNavBarI: ["_320PxNavBarI"],
  _320PxImageIcons: ["_320PxImageIcons"],
  _320PxCwOfferBogo: ["_320PxCwOfferBogo"],
  _320Px3Pack: ["_320Px3Pack"],
  _320PxVariety: ["_320PxVariety"],
  _320PxFuel: ["_320PxFuel"],
  _320PxPure: ["_320PxPure"],
  _320PxMelt: ["_320PxMelt"],
  _320XSubscriptionImage: ["_320XSubscriptionImage"],
  _320PxCommitment: ["_320PxCommitment"],
  _320PxFooterI: ["_320PxFooterI"],
  _320PxFooter: ["_320PxFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  page: "div";
  _1440Px: "div";
  head: "div";
  announcementBar1440Px: typeof AnnouncementBar1440Px;
  navBar1440Px: typeof NavBar1440Px;
  body: "div";
  headlineIcons1440Px: typeof HeadlineIcons1440Px;
  disposableBogoOffer1440Px: typeof DisposableBogoOffer1440Px;
  collection3Pack1440Px: typeof Collection3Pack1440Px;
  _1440VarietyRedo: typeof _1440VarietyRedo;
  fuelSingle1440Px: typeof FuelSingle1440Px;
  pureSingle1440Px: typeof PureSingle1440Px;
  variety6Pack1440Px: typeof Variety6Pack1440Px;
  meltSingle1440Px: typeof MeltSingle1440Px;
  subscriptionImageTextBanner: typeof SubscriptionImageTextBanner;
  footer: "div";
  promissoryCommitment1440Px: typeof PromissoryCommitment1440Px;
  footer1440Px: typeof Footer1440Px;
  _414PxRedo: "div";
  collectionWhole414Px: typeof CollectionWhole414Px;
  headlineIcons414Px: typeof HeadlineIcons414Px;
  _414BogoOffer: typeof _414BogoOffer;
  _3Pack414Px: typeof _3Pack414Px;
  _414PxVariety: typeof _414PxVariety;
  fuelSingle414Px: typeof FuelSingle414Px;
  pureSingle414Px: typeof PureSingle414Px;
  meltSingle414Px: typeof MeltSingle414Px;
  subscriptionImageText414Px: typeof SubscriptionImageText414Px;
  promissoryCommitment414Px: typeof PromissoryCommitment414Px;
  footer414Px: typeof Footer414Px;
  freeBox: "div";
  _320PxAnncoumentFinal: typeof _320PxAnncoumentFinal;
  _320PxNavBarI: typeof _320PxNavBarI;
  _320PxImageIcons: typeof _320PxImageIcons;
  _320PxCwOfferBogo: typeof _320PxCwOfferBogo;
  _320Px3Pack: typeof _320Px3Pack;
  _320PxVariety: typeof _320PxVariety;
  _320PxFuel: typeof _320PxFuel;
  _320PxPure: typeof _320PxPure;
  _320PxMelt: typeof _320PxMelt;
  _320XSubscriptionImage: typeof _320XSubscriptionImage;
  _320PxCommitment: typeof _320PxCommitment;
  _320PxFooterI: typeof _320PxFooterI;
  _320PxFooter: typeof _320PxFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlog12__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlog12__VariantsArgs;
    args?: PlasmicBlog12__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlog12__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBlog12__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlog12__ArgProps,
          internalVariantPropNames: PlasmicBlog12__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlog12__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "page") {
    func.displayName = "PlasmicBlog12";
  } else {
    func.displayName = `PlasmicBlog12.${nodeName}`;
  }
  return func;
}

export const PlasmicBlog12 = Object.assign(
  // Top-level PlasmicBlog12 renders the root element
  makeNodeComponent("page"),
  {
    // Helper components rendering sub-elements
    _1440Px: makeNodeComponent("_1440Px"),
    head: makeNodeComponent("head"),
    announcementBar1440Px: makeNodeComponent("announcementBar1440Px"),
    navBar1440Px: makeNodeComponent("navBar1440Px"),
    body: makeNodeComponent("body"),
    headlineIcons1440Px: makeNodeComponent("headlineIcons1440Px"),
    disposableBogoOffer1440Px: makeNodeComponent("disposableBogoOffer1440Px"),
    collection3Pack1440Px: makeNodeComponent("collection3Pack1440Px"),
    _1440VarietyRedo: makeNodeComponent("_1440VarietyRedo"),
    fuelSingle1440Px: makeNodeComponent("fuelSingle1440Px"),
    pureSingle1440Px: makeNodeComponent("pureSingle1440Px"),
    variety6Pack1440Px: makeNodeComponent("variety6Pack1440Px"),
    meltSingle1440Px: makeNodeComponent("meltSingle1440Px"),
    subscriptionImageTextBanner: makeNodeComponent(
      "subscriptionImageTextBanner"
    ),
    footer: makeNodeComponent("footer"),
    promissoryCommitment1440Px: makeNodeComponent("promissoryCommitment1440Px"),
    footer1440Px: makeNodeComponent("footer1440Px"),
    _414PxRedo: makeNodeComponent("_414PxRedo"),
    collectionWhole414Px: makeNodeComponent("collectionWhole414Px"),
    headlineIcons414Px: makeNodeComponent("headlineIcons414Px"),
    _414BogoOffer: makeNodeComponent("_414BogoOffer"),
    _3Pack414Px: makeNodeComponent("_3Pack414Px"),
    _414PxVariety: makeNodeComponent("_414PxVariety"),
    fuelSingle414Px: makeNodeComponent("fuelSingle414Px"),
    pureSingle414Px: makeNodeComponent("pureSingle414Px"),
    meltSingle414Px: makeNodeComponent("meltSingle414Px"),
    subscriptionImageText414Px: makeNodeComponent("subscriptionImageText414Px"),
    promissoryCommitment414Px: makeNodeComponent("promissoryCommitment414Px"),
    footer414Px: makeNodeComponent("footer414Px"),
    freeBox: makeNodeComponent("freeBox"),
    _320PxAnncoumentFinal: makeNodeComponent("_320PxAnncoumentFinal"),
    _320PxNavBarI: makeNodeComponent("_320PxNavBarI"),
    _320PxImageIcons: makeNodeComponent("_320PxImageIcons"),
    _320PxCwOfferBogo: makeNodeComponent("_320PxCwOfferBogo"),
    _320Px3Pack: makeNodeComponent("_320Px3Pack"),
    _320PxVariety: makeNodeComponent("_320PxVariety"),
    _320PxFuel: makeNodeComponent("_320PxFuel"),
    _320PxPure: makeNodeComponent("_320PxPure"),
    _320PxMelt: makeNodeComponent("_320PxMelt"),
    _320XSubscriptionImage: makeNodeComponent("_320XSubscriptionImage"),
    _320PxCommitment: makeNodeComponent("_320PxCommitment"),
    _320PxFooterI: makeNodeComponent("_320PxFooterI"),
    _320PxFooter: makeNodeComponent("_320PxFooter"),

    // Metadata about props expected for PlasmicBlog12
    internalVariantProps: PlasmicBlog12__VariantProps,
    internalArgProps: PlasmicBlog12__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Meet The Newest Flavor Diffuser",
      description: "Here's how to claim a free device!",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBlog12;
/* prettier-ignore-end */
