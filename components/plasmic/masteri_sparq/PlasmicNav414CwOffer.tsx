// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wJD4VsJTYW6gZPn3AUEzqs
// Component: jgIadmQ9AD4-u
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantssuXxHpH6GpmS } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SUXxHpH6GpmS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_masteri_sparq.module.css"; // plasmic-import: wJD4VsJTYW6gZPn3AUEzqs/projectcss
import sty from "./PlasmicNav414CwOffer.module.css"; // plasmic-import: jgIadmQ9AD4-u/css

export type PlasmicNav414CwOffer__VariantMembers = {};
export type PlasmicNav414CwOffer__VariantsArgs = {};
type VariantPropType = keyof PlasmicNav414CwOffer__VariantsArgs;
export const PlasmicNav414CwOffer__VariantProps = new Array<VariantPropType>();

export type PlasmicNav414CwOffer__ArgsType = {};
type ArgPropType = keyof PlasmicNav414CwOffer__ArgsType;
export const PlasmicNav414CwOffer__ArgProps = new Array<ArgPropType>();

export type PlasmicNav414CwOffer__OverridesType = {
  div91?: p.Flex<"div">;
  div94?: p.Flex<"div">;
  label4?: p.Flex<"a"> & Partial<LinkProps>;
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2?: p.Flex<"div">;
  freeShipping4?: p.Flex<"div">;
};

export interface DefaultNav414CwOfferProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNav414CwOffer__RenderFunc(props: {
  variants: PlasmicNav414CwOffer__VariantsArgs;
  args: PlasmicNav414CwOffer__ArgsType;
  overrides: PlasmicNav414CwOffer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssuXxHpH6GpmS()
  });

  return (
    <div
      data-plasmic-name={"div91"}
      data-plasmic-override={overrides.div91}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.div91
      )}
    >
      {(hasVariant(globalVariants, "screen", "largestMobile") ? true : true) ? (
        <div
          data-plasmic-name={"div94"}
          data-plasmic-override={overrides.div94}
          className={classNames(projectcss.all, sty.div94)}
        >
          <p.PlasmicLink
            data-plasmic-name={"label4"}
            data-plasmic-override={overrides.label4}
            className={classNames(projectcss.all, projectcss.a, sty.label4)}
            component={Link}
            href={"#offer" as const}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sOcPw
              )}
            >
              {"CLAIM FREE DEVICE"}
            </div>
          </p.PlasmicLink>

          <div
            data-plasmic-name={
              "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2"
            }
            data-plasmic-override={
              overrides.specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2
            }
            className={classNames(
              projectcss.all,
              sty.specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rnigs
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"SPECIAL OFFER:"}
                </span>
                <React.Fragment>
                  {
                    " Claim this one-time offer. Try Vitamin Air at a fraction of the regular price today."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </div>

          <div
            data-plasmic-name={"freeShipping4"}
            data-plasmic-override={overrides.freeShipping4}
            className={classNames(projectcss.all, sty.freeShipping4)}
          >
            {(
              hasVariant(globalVariants, "screen", "largestMobile")
                ? true
                : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fvC1H
                )}
              >
                {"+ Free Shipping"}
              </div>
            ) : null}
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  div91: [
    "div91",
    "div94",
    "label4",
    "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2",
    "freeShipping4"
  ],
  div94: [
    "div94",
    "label4",
    "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2",
    "freeShipping4"
  ],
  label4: ["label4"],
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2:
    [
      "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2"
    ],
  freeShipping4: ["freeShipping4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  div91: "div";
  div94: "div";
  label4: "a";
  specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2: "div";
  freeShipping4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNav414CwOffer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNav414CwOffer__VariantsArgs;
    args?: PlasmicNav414CwOffer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNav414CwOffer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNav414CwOffer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNav414CwOffer__ArgProps,
          internalVariantPropNames: PlasmicNav414CwOffer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNav414CwOffer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "div91") {
    func.displayName = "PlasmicNav414CwOffer";
  } else {
    func.displayName = `PlasmicNav414CwOffer.${nodeName}`;
  }
  return func;
}

export const PlasmicNav414CwOffer = Object.assign(
  // Top-level PlasmicNav414CwOffer renders the root element
  makeNodeComponent("div91"),
  {
    // Helper components rendering sub-elements
    div94: makeNodeComponent("div94"),
    label4: makeNodeComponent("label4"),
    specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2:
      makeNodeComponent(
        "specialOfferClaimThisOneTimeOfferTryVitaminAirAtAFractionOfTheRegularPriceToday2"
      ),
    freeShipping4: makeNodeComponent("freeShipping4"),

    // Metadata about props expected for PlasmicNav414CwOffer
    internalVariantProps: PlasmicNav414CwOffer__VariantProps,
    internalArgProps: PlasmicNav414CwOffer__ArgProps
  }
);

export default PlasmicNav414CwOffer;
/* prettier-ignore-end */
